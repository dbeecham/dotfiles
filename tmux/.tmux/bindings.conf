# Unbind all keys
unbind-key -a

# Ctrl is "C-" or "^", alt (meta) is "M-", shift is "S-".
# Special key names: Up, Down, Left, Right, BSpace, BTab, DC (delete), End,
# Enter, Escape, F1-F20, Home, IC (insert), NPage/PageDown/PgDn,
# PPage/PageUp/PgUp, Space and Tab.
# For " and ', quotations marks are necessary, e.g:
# bind-key '"' split-window
# bind-key "'" new-window
# if -n is specified, command is bound to key alone, without prefix.

# Change prefix to ctrl-a
set-option -g prefix C-b

set-option -g xterm-keys on


# home, end
bind -n End send-key C-e
bind -n Home send-key C-a

# turns on vi-mode in copy and choice modes
#mode-keys vi

# turns on vi mode for status line; like the command prompt.
#status-keys vi

# Ctrl is "C-" or "^", alt (meta) is "M-", shift is "S-".
# Special key names: Up, Down, Left, Right, BSpace, BTab, DC (delete), End,
# Enter, Escape, F1-F20, Home, IC (insert), NPage/PageDown/PgDn,
# PPage/PageUp/PgUp, Space and Tab.
# For " and ', quotations marks are necessary, e.g:
# bind-key '"' split-window
# bind-key "'" new-window
# if -n is specified, command is bound to key alone, without prefix.

# C-b C-b -> last window
bind-key C-b last-window

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."


# For some reason, this stopped working correctly. The 'isvim' command
# ran in the background with lots of CPU usage, and all bindings for tmux
# stopped working. So I disabled it.
# Smart pane switching with awareness of vim splits
#is_vim='~/bin/isvim "#{pane_pid}"'
#bind -n M-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
#bind -n M-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
#bind -n M-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#bind -n M-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Mouse binds. mouse 3 is right click, mouse 2 is middle click.
bind -n MouseDown1Pane select-pane -t= \; send-keys -M
bind -n MouseUp1Pane select-pane -t= \; send-keys -M

bind -n MouseDrag1Border resize-pane -t= -M
#bind -n MouseDrag3Pane resize-pane -t= -M
bind -n MouseDown1Status select-window -t=
bind -n MouseDown2Pane run "tmux set-buffer \"$(xclip -o -sel primary)\"; tmux paste-buffer"
bind -n MouseDown3Pane run "tmux set-buffer \"$(xclip -o -sel primary)\"; tmux paste-buffer"


# select-pane selects panes. -DLRU is down, left, right and up. -l is last.
#bind -n A-l select-pane -L
#bind -n A-k select-pane -U
#bind -n A-j select-pane -D
#bind -n A-h select-pane -R

#bind -n A-l run-shell "SIZE=$(tmux showw main-pane-width | cut -d ' ' -f 2); tmux setw main-pane-width $((SIZE+3)) >> /dev/null; tmux resize-pane -R -t 0 3"
#bind -n A-h run-shell "SIZE=$(tmux showw main-pane-width | cut -d ' ' -f 2); tmux setw main-pane-width $((SIZE-3)) >> /dev/null; tmux resize-pane -L -t 0 3"

#bind -n A-j run-shell "MAX=#{window_panes}; CURRENT=#{pane_index}; tmux select-pane -t $(((CURRENT+1)%(MAX)))"
#bind -n A-k run-shell "MAX=#{window_panes}; CURRENT=#{pane_index}; tmux select-pane -t $(((CURRENT+MAX-1)%(MAX)))"

# Splitting window
bind -n M-v split-window -h
bind -n M-g split-window -v
bind v split-window -h
bind g split-window -v

bind -n M-x kill-pane \; select-layout main-vertical

# tile windows
bind -n M-t select-layout main-vertical

# swap a'la dwm
bind -n M-Enter swap-pane -t 0 \; select-pane -t 0

bind -n M-Q kill-pane \; select-layout main-vertical

# new terminal a'la dwm
bind -n M-Space split-window \; select-layout main-vertical

# rename window
bind '"' command-prompt -I "#{window_name}" "rename-window '%%'"

# rename session
bind n command-prompt -I "#{session_name}" "rename-session '%%'"

# detach using <prefix> d
bind d detach-client

# toggle fullscreen using meta-f
bind -n M-f resize-pane -Z

# Resizes a pane using meta-shift-[hjkl].
bind -n M-K resize-pane -U 4
bind -n M-J resize-pane -D 4
bind -n M-H resize-pane -L 8
bind -n M-L resize-pane -R 8

bind -n M-1 run-shell "tmux select-window -t #S:1 >> /dev/null; if test \$? = 1; then tmux new-window -t 1; fi"
bind -n M-2 run-shell "tmux select-window -t #S:2 >> /dev/null; if test \$? = 1; then tmux new-window -t 2; fi"
bind -n M-3 run-shell "tmux select-window -t #S:3 >> /dev/null; if test \$? = 1; then tmux new-window -t 3; fi"
bind -n M-4 run-shell "tmux select-window -t #S:4 >> /dev/null; if test \$? = 1; then tmux new-window -t 4; fi"
bind -n M-5 run-shell "tmux select-window -t #S:5 >> /dev/null; if test \$? = 1; then tmux new-window -t 5; fi"
bind -n M-6 run-shell "tmux select-window -t #S:6 >> /dev/null; if test \$? = 1; then tmux new-window -t 6; fi"
bind -n M-7 run-shell "tmux select-window -t #S:7 >> /dev/null; if test \$? = 1; then tmux new-window -t 7; fi"
bind -n M-8 run-shell "tmux select-window -t #S:8 >> /dev/null; if test \$? = 1; then tmux new-window -t 8; fi"
bind -n M-9 run-shell "tmux select-window -t #S:9 >> /dev/null; if test \$? = 1; then tmux new-window -t 9; fi"

bind 1 run-shell "tmux join-pane -t #S:1 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:1; if test \$? = 1; then tmux move-window -t #S:1; fi; fi;"
bind 2 run-shell "tmux join-pane -t #S:2 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:2; if test \$? = 1; then tmux move-window -t #S:2; fi; fi;"
bind 3 run-shell "tmux join-pane -t #S:3 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:3; if test \$? = 1; then tmux move-window -t #S:3; fi; fi;"
bind 4 run-shell "tmux join-pane -t #S:4 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:4; if test \$? = 1; then tmux move-window -t #S:4; fi; fi;"
bind 5 run-shell "tmux join-pane -t #S:5 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:5; if test \$? = 1; then tmux move-window -t #S:5; fi; fi;"
bind 6 run-shell "tmux join-pane -t #S:6 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:6; if test \$? = 1; then tmux move-window -t #S:6; fi; fi;"
bind 7 run-shell "tmux join-pane -t #S:7 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:7; if test \$? = 1; then tmux move-window -t #S:7; fi; fi;"
bind 8 run-shell "tmux join-pane -t #S:8 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:8; if test \$? = 1; then tmux move-window -t #S:8; fi; fi;"
bind 9 run-shell "tmux join-pane -t #S:9 >> /dev/null; if test \$? = 1; then tmux break-pane -t #S:9; if test \$? = 1; then tmux move-window -t #S:9; fi; fi;"

bind-key C-Tab command-prompt -p "join pane from:"  "join-pane -s '%%'"

bind h swap-pane -d -t {left}
bind l swap-pane -d -t {right}
bind j swap-pane -d -t {down}
bind k swap-pane -d -t {up}

bind ":" command-prompt
