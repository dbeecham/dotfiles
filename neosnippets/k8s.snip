snippet service
alias svc
options head
	apiVersion: v1
	kind: Service
	metadata:
		name: ${1:my-name}
		namespace: ${2:my-namespace}
	spec:
		selector:
			name: $1
		ports:
			- port: ${3:80}
			  targetPort: ${4:8000}
	---
	${0}

snippet deploy
options head
alias deployment
	apiVersion: apps/v1
	kind: Deployment
	metadata:
		name: ${1:my-name}
		namespace: ${2:my-namespace}
	spec:
		# DeploymentSpec: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#deploymentspec-v1-apps
		replicas: 1
		selector:
			matchLabels:
				name: $1
		template:
			# PodTemplaceSpec: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podtemplatespec-v1-core
			metadata:
				labels:
					name: $1
			spec:
				# PodSpec: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#podspec-v1-core
				#securityContext:
				#    fsGroup: something
				terminationGracePeriodSeconds: 30
				volumes:
					- name: scratch-volume
					  emptyDir: {}
					- name: secret
					  secret:
						secretName: mysecret
						defaultMode: 0400
					- name: anothersecret
					  secret:
						secretName: hello
						items:
							- key: username
							  path: my-group/my-username
							  mode: 0777
				imagePullSecrets:
					- name: regcred
			    #restartPolicy: OnFailure
				containers:
					- name: $1
					  image: ${3:registry.github.com/path/to/repo}
					  imagePullPolicy: 
					  volumeMounts:
						  - mountPath: /var/lib/influxdb
							name: scratch-volume
						  - mountPath: /etc/foo
							name: secret
							readOnly: true
					  ports:
						  - containerPort: ${4:8086}
					  env:
						- name: CONCOURSE_POSTGRES_USER
						  value: postgres
						- name: SECRET_USERNAME
						  valueFrom:
							secretKeyRef:
							  name: mysecret
							  key: username
					  command: ["printenv"]
					  args: ["HOSTNAME", "KUBERNETES_PORT"]
					  resources:
						requests:
							memory: "32Mi"
							cpu: "200m" # 1000 = 1 core
						limits:
							memory: "64Mi"
							cpu: "250m"
					  lifecycle:
						postStart:
						  exec:
							command: ["/bin/sh", "-c", "echo Hello from postStart handler > /usr/share/message"]
						preStop:
						  exec:
							command: ["/bin/sh", "-c", "nginx -s quit; while killall -0 nginx; do sleep 1; done"]
	---
	${0}

snippet certificate
alias cert
options head
	apiVersion: cert-manager.io/v1
	kind: Certificate
	metadata:
		name: ${1:lens-plejd-io}
		namespace: ${2:lens}
	spec:
		secretName: $1
		issuerRef:
			name: ${3:letsencrypt-cluster}
			kind: ClusterIssuer
		commonName: ${4:lens.plejd.io}
		dnsNames:
			- $4
	---
	${0}

snippet ingress
options head
	apiVersion: networking.k8s.io/v1beta1
	kind: Ingress
	metadata:
		name: ${1:lens-plejd-io}
		namespace: ${2:lens}
	spec:
		rules:
		  - host: ${3:lens.plejd.io}
			http:
				paths:
					- path: "/"
					  backend:
						  serviceName: ${4:frontend}
						  servicePort: ${5:80}
		tls:
		  - secretName: ${6:lens-plejd-io}
			hosts:
				- $3
	---
	${0}

