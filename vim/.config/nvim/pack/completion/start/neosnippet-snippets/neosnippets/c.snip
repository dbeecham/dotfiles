# Templates {{{
snippet stdc
options head
	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>
	#include <sys/signalfd.h>
	#include <signal.h>
	#include <pthread.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>

	#include "`ProjectName()`.h"

	${0}
snippet stdh
options head
	#pragma once

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>
	#include <sys/signalfd.h>
	#include <signal.h>
	#include <pthread.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h>
# }}}

# Control structures {{{
snippet     if
options     head
abbr        if () {}
    if (${1:-1 == ret}) {
        ${0:TARGET}
    }

snippet     iff
options     head
abbr        if () 
    if (${1:-1 == ret})
        ${0:TARGET}

# No head option in else/elseif so it can be expanded after "}"
snippet     else
abbr        else {}
    else {
        ${0:TARGET}
    }

snippet     elif
abbr        else () {}
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     for
options     head
abbr        for () {}
    for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; $2++) {
        ${0:#:TARGET}
    }

# Counter based for's (don't ask for the type or count start)
snippet     fori
options     head
abbr        for (int x;...; x++) {}
    for (int ${1:i} = 0; $1 < ${2}; $1++) {
        ${0:#:TARGET}
    }

# For reverse counter
snippet     forri
options     head
abbr        for (int x; ...; x--) {}
    for (int ${1:i} = ${2}; $1 >= 0; $1--) {
        ${0:#:TARGET}
    }

snippet     while
options     head
abbr        while () {}
    while (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     switch
options     head
abbr        switch () {}
	switch (${1:#:var}) {
		case ${2:#:val}:
			${0:TARGET}
			break;
	}

snippet     case
options     head
abbr        case: break;
	case ${1}:
		${0}
		break;

# }}}

# Definition bodies {{{
snippet f
	${1:int} ${2:`ProjectName()`}${3:} (
		${4:struct `ProjectName()`_s * `ProjectName()`}${5:#:,args...}
	)
	{

		int ret = 0;

		${0}

		return 0;
	}
snippet F
    ${1:ret} = ${2:`ProjectName()`}${3:_init}(${4:`ProjectName()`}${5:#:,args...});
    ${0}
snippet struct
options head
abbr struct {}
	struct ${1:#:name} {
	    uint8_t sentinel;
	    ${0:TARGET:data}
	};

snippet     enum
options     head
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main
options head
	int main (
	    int argc,
	    char const* argv[]
	)
	{
	    ${0:TARGET}
	    return 0;
	}
# }}}

# Preprocessing directives {{{
# #include <...>
snippet     inc
options     head
alias       #inc, #include
    #include <${1:stdio.h}${0}

# #include "..."
snippet     Inc
options     head
alias       #Inc
    #include "${1}${0}

snippet     ifdef
options     head
alias       #ifdef
abbr        #ifdef ... #endif
    #ifdef ${1:#:SYMBOL}
    ${0}
    #endif

snippet     ifndef
options     head
alias       #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

# This snippet used the placeholder instead of a trailing space
snippet     def
options     head
alias       #def, #define
    #define ${1}

# }}}

# Built-in function calls {{{
snippet strerror
	strerror(${1:errno})${0}
snippet snprintf
options head
	bytes_written = snprintf(${1:buf}, ${2:buf_len}, "${3:FORMAT STRING}"${4:#:, args...});
	if (-1 == bytes_written) {
		syslog(LOG_WARNING, "%s:%d:%s: snprintf: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet printf
abbr    printf("...\n", ...);
    printf("%s:%d:%s: ${1}\n", __FILE__, __LINE__, __func__${2:#:,...});
	${0}

snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n"${3});

snippet fgets
abbr    fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:stdin});

snippet fscanf
abbr    fscanf(file, "...", ...);
    fscanf(${1:stdin}, "${2}", ${3});

snippet fwrite
abbr    fwrite(......, file)
    fwrite(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet fread
abbr    fread(......, file)
    fread(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})

snippet memcpy
abbr    memcpy(dest, src, nbytes)
    memcpy(${1:DEST}, ${2:SRC}, ${3:NBYTES})

snippet malloc
abbr    malloc(size)
	($2 *)malloc(${1:N_MEMBERS} * sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet calloc
abbr    calloc(n, size)
	($2 *)calloc(${1:N_MEMBERS}, sizeof(${2:TYPE}));
	${0}
	free(${3:MEM});

snippet realloc
abbr    realloc(old, size)
	($3 *)realloc(${1:OLD}, ${2:N_MEMBERS} * sizeof(${3:TYPE}));
	${0}

snippet seed_rand
    srand(time(NULL));

snippet bsearch
options head
	// A needle to search for in the haystack; needs to be able to be compared
	// to items in the key-value list using the compare function (bsearch_cmp).
	struct ${1:item_s} key = {"${2:key}", 0};
	struct $1 * needle = bsearch(
		/* key = */ &key,
		/* haystack = */ ${3:`ProjectName()`->kv}, 
		/* haystack_len = */ ${4:$3_len},
		/* item size = */ ${5:sizeof(*$3)},
		/* cmp_cb = */ ${6:`ProjectName()`_cmp}
	);
	if (NULL == needle) {
		syslog(LOG_INFO, "%s:%d:%s: item not found", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
# }}}

# Built-in operators and alias {{{
snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet sizeof
alias   size
    sizeof(${0:TARGET})

snippet sizeof_array
alias   array_size
    (sizeof(${1:#:array}) / sizeof(*($1)))

snippet _Static_assert
alias   _static_assert
options head
    _Static_assert(${1:#:condition}, ${2:#:message});

snippet static_assert
options head
    static_assert(${1:#:condition}, ${2:#:message});

snippet _Generic
alias   generic, select
    _Generic(${1:#:expression}, ${2:#:association-list})

snippet va_list
options head
abbr    va_start(va_list, last_arg); ... ; va_end()
	va_list ${1:ap};
	va_start($1, ${2:LAST_ARG});
	${0}
	va_end($1);
# }}}

# syslog {{{
snippet openlog
options head
	openlog("${1:`ProjectName()`}", LOG_CONS | LOG_PID, LOG_USER);${0}
snippet syslog
options head
	// NOTE TO SELF: snippets available for syslog:
	//   * openlog - opens syslog
	//   * err     - syslog() error message
    //   * warn    - syslog() warning message
	//   * info    - syslog() info message
    //   * debug   - syslog() debug message
    //   * hi      - syslog() debug hi message
	// Remember to #include <syslog.h> (snip 'isyslog')
snippet perr
options head
	printf("%s:%d:%s: ${1:hi!}\n", __FILE__, __LINE__, __func__${2:#: strerror(errno), ...});${0}
snippet err
options head
	syslog(LOG_ERR, "%s:%d:%s: ${1:msg}", __FILE__, __LINE__, __func__${2:#:, strerror(errno), ...});${0}
snippet warn
options head
	syslog(LOG_WARNING, "%s:%d:%s: ${1:msg}", __FILE__, __LINE__, __func__${2:#:,, strerror(errno), ...});${0}
snippet info
options head
	syslog(LOG_INFO, "%s:%d:%s: ${1:#:msg}", __FILE__, __LINE__, __func__${2:#:, args...});${0}
snippet debug
options head
    syslog(LOG_DEBUG, "%s:%d:%s: ${1:#:msg}", __FILE__, __LINE__, __func__${2:#:, args..});${0}
snippet hi
options head
    syslog(LOG_DEBUG, "%s:%d:%s: hi!", __FILE__, __LINE__, __func__);
# }}}

# basic fd stuff {{{
snippet read
options head
    bytes_read = read(${1:fd}, ${2:buf}, ${3:buf_len});
    if (-1 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
    }
    if (0 == bytes_read) {
        ${4}
    }
    ${0}
snippet close
options head
	ret = close(${1:fd});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: close: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet exit
options head
	exit(EXIT_FAILURE);
snippet readv
	ret = readv(
		/* fd = */ ${1:fd},
		/* iovecs = */ (struct iovec[]) {
			{
				.iov_base = ${2:buf},
				.iov_len = ${3:buf_len}
			}${4:#:,...}
		},
		/* iovecs_len = */ ${5:1}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: readv: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet writev
	ret = writev(
		/* fd = */ ${1:fd},
		/* iovecs = */ (struct iovec[]) {
			{
				.iov_base = ${2:buf},
				.iov_len = ${3:buf_len}
			}${4:#:,...}
		},
		/* iovecs_len = */ ${5:1}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: writev: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
# }}}

# dirent {{{
snippet dir
options head
	// snippets related to directories:
	//  * opendir - open a directory
	//  * closedir - close a directory
	//  * readdir - readdir loop
	//  * rewinddir
	//  * dirfd - get directory fd for use in readat() et al
	//  * nftw - new file tree walking
snippet opendir
options head
	DIR * ${1:dir} = opendir("${2:#:path...}");
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: opendir: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet closedir
options head
    ret = closedir(${1:dir});
    if (-1 == ret) {
        syslog(LOG_ERR, "%s:%d:%s: closedir: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
    }
	${0}
snippet readdir
alias readdir_r
options head
	struct dirent * dirent;
	// this loop is just here as a best-practice to avoid infinite loops
	for (int i = 0; i < ${1:1024}; i++) {
		errno = 0;
		dirent = readdir(dir);
		if (NULL == dirent && errno != 0) {
			syslog(LOG_ERR, "%s:%d:%s: readdir: %s", __FILE__, __LINE__, __func__, strerror(errno));
			return -1;
		}
		if (NULL == dirent) {
			// read all directory entries, all done.
			break;
		}

		if ('.' == dirent->d_name[0] && ('.' == dirent->d_name[1] || 0 == dirent->d_name[1])) {
			// skip '.' and '..'
			continue;
		}

		// do something with the dirent entry, like lstat() to figure out the
		// file type
		${0}
	}
snippet rewinddir
options head
	rewinddir(${1:dir});
	${0}
snippet dirfd
options head
	${1:dir_fd} = dirfd(${2:dir});
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: dirfd: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet unlinkat
options head
	// the AT_REMOVEDIR flag can 'rmdir' directories
	ret = unlinkat(
		/* dirfd = */ ${1:dir_fd},
		/* path = */ ${2:dirent->d_name},
		/* flags = */ ${3:0}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: unlinkat(%s): %s",
			__FILE__, __LINE__, __func__, $2, strerror(errno));
		return -1;
	}
	${0}
snippet nftw
options head
	// some useful flags:
	//  * FTW_CHDIR - chdir() into directory before processing its content
	//  * FTW_DEPTH - use post-order traversal instead of pre-order (it's always depth-first, not breadth first)
	//  * FTW_MOUNT - dont cross over file systems
	//  * FTW_PHYS - dont rereference symbolic links (typeflag will be FWT_SL)
	// snippet for function is available in nftwcb
	ret = nftw(
		/* path = */ ${1:path...},
		/* func = */ ${2:func...},
		/* max open fds = */ 32,
		/* flags = */ FTW_MOUNT
	);
	if (-1 == ret) {
		// handle error
	}
snippet nftwcb
options head
	int ${1:funcname} (
		const char * path,
		const struct stat * stat,
		int typeflag,
		struct FTW *ftw
	)
	{
		// typeflag can be
		//  * FTW_D - directory
		//  * FTW_DNR - cant be read
		//  * FTW_DP - were doing postorder traversal, and this is a directory we've already traversed
		//  * FTW_F - file of any other type than directory or symbolic link
		//  * FTW_NS - calling stat() on this function failed; the value of struct stat is undefined
		//  * FTW_SL - symbolic link
		//  * FTW_SLN - dangling symbolic link (only occurs if FTW_PHYS was not specified)
		// the FTW struct looks like this
		//  struct FTW {
		//    int base; // offset to basename part of pathname
		//    int level; // depth of file within tree traversal
		//  }
	${0}
	}

# }}}

# libuv {{{
snippet uv_timer_start
options head
	// uv_timer_t timer_handle = {0};
	ret = uv_timer_start(
		/* timer = */ ${1:&}${2:timer_handle},
		/* cb = */ ${3:cb},
		/* initial time = */ ${4:1000},
		/* repeat time = */ ${5:0}
	);
	if (ret < 0) {
        syslog(LOG_ERR, "%s:%d:%s uv_timer_start: %s",
                __FILE__, __LINE__, __func__, uv_strerror(ret));
        ${5:exit(EXIT_FAILURE);}
	}
	${0}
# }}}

# socket {{{
snippet socket
options head
	${1:`ProjectName()`->sock_fd} = socket(
		/* domain = */ ${2:servinfo_p}->ai_family, // AF_UNSPEC, AF_INET, AF_INET6, AF_LOCAL
		/* type = */ $2->ai_socktype | SOCK_NONBLOCK | SOCK_CLOEXEC, // SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
		/* protocol = */ $2->ai_protocol // IPPROTO_IP
	);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet tcpconnect
options head
	struct addrinfo *servinfo, *servinfo_p;
	ret = getaddrinfo(
		/* host = */ "${1:127.0.0.1}",
		/* port = */ "${2:4222}",
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_STREAM,
			.ai_flags = AI_PASSIVE
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}

	// Loop over the results from getaddrinfo and try to connect
	for (servinfo_p = servinfo; servinfo_p != NULL; servinfo_p = servinfo_p->ai_next) {
		${3:`ProjectName()`->sock_fd} = socket(servinfo_p->ai_family, servinfo_p->ai_socktype, servinfo_p->ai_protocol);
		if (-1 == $3) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
			continue;
		}

        ret = fcntl($3, F_SETFL, O_NONBLOCK);
        if (-1 == ret) {
            syslog(LOG_ERR, "%s:%d:%s: fcntl: %s", __FILE__, __LINE__, __func__, strerror(errno));
            return -1;
        }

		ret = connect($3, servinfo_p->ai_addr, servinfo_p->ai_addrlen);
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: connect: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($3);
			continue;
		}

		break;
	}
	if (NULL == servinfo_p) {
		syslog(LOG_ERR, "%s:%d:%s: failed to connect", __FILE__, __LINE__, __func__);
		return -1;
	}
	freeaddrinfo(servinfo);
	${0}
snippet connect
options head
	ret = connect(${1:`ProjectName()`->fd}, servinfo_p->ai_addr, servinfo_p->ai_addrlen);
	if (-1 == ret) {
		syslog(LOG_WARNING, "%s:%d:%s: connect: %s", __FILE__, __LINE__, __func__, strerror(errno));
		close($1);
		return -1;
	}
	${0}
# }}}

# ipcs {{{
snippet pipe
options head
	// $1[0] contains the read-end of the pipe, $1[1] contains the write-end.
	ret = pipe2(${1:`ProjectName()`->pipe_fd}, O_CLOEXEC | O_NONBLOCK);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: pipe2: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet socketpair
options head
	ret = socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, ${1:`ProjectName()`->sp_fd});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: socketpair: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

# }}}

# epoll {{{
snippet epoll
options head
	// NOTE TO SELF: snippets available for epoll:
	//   * epc - create epoll
	//   * epa - add fd to epoll
	//   * epd - delete fd from epoll
	//   * epm - modify (re-arm) fd in epoll
	//   * epw - main epoll_wait loop
	// To use epoll, remember to #include <sys/epoll.h> (snip 'iepoll')
    ${0}
snippet epc
	// Create the epoll instance
	${1:`ProjectName()`->epollfd} = epoll_create1(EPOLL_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_create1: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
    ${0}
snippet epa
	ret = epoll_ctl(
		${1:`vim_snippets#Filename('$1')`->epollfd},
		EPOLL_CTL_ADD,
	    ${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLONESHOT,
			.data = {
				.fd = $2
			}
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet epd
	// Remember to EPOLL_CTL_DEL *before* closing the file descriptor, see
	// https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/
	ret = epoll_ctl(
		${1:epollfd},
		EPOLL_CTL_DEL,
	    ${2:fd},
		NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
    ${0}
snippet epm
	ret = epoll_ctl(
		${1:epollfd},
		EPOLL_CTL_MOD,
	    ${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLONESHOT,
			.data = event->data
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}${0}
snippet epw
	int epoll_events_len = 0;
	struct epoll_event epoll_events[8];
	while (1) {
		epoll_events_len = epoll_wait(
			/* epollfd = */ ${1:`ProjectName()`->epollfd},
			/* &events = */ epoll_events,
			/* events_len = */ 8,
			/* timeout = */ -1
		);

		// got interrupted, just try again.
		if (-1 == epoll_events_len && EINTR == errno) {
			continue;
		}

		if (-1 == epoll_events_len) {
			syslog(LOG_ERR, "%s:%d:%s: epoll_wait: %s", __FILE__, __LINE__, __func__, strerror(errno));
			return -1;
		}

		if (0 == epoll_events_len) {
			syslog(LOG_ERR, "%s:%d:%s: epoll_wait returned 0 events", __FILE__, __LINE__, __func__);
			return -1;
		}

		// dispatch on event
		// (snippet: epev)
		ret = ${2:`ProjectName()`}_epoll_handle_events(${3:`ProjectName()`}, epoll_events, epoll_events_len);
		if (-1 == ret) {
			syslog(LOG_ERR, "%s:%d:%s: $2_epoll_handle_events returned -1", __FILE__, __LINE__, __func__);
			return -1;
		}
	}
	${0}
snippet epev
	static int ${1:`ProjectName()`}_epoll_handle_events (
	    struct $1_s * $1,
		struct epoll_event epoll_events[8],
		int epoll_events_len
	)
	{
		int ret = 0;
		for (int i = 0; i < epoll_events_len; i++) {
			// (snippet: epdisp)
			ret = $1_epoll_event_dispatch($1, &epoll_events[i]);
			if (0 != ret) {
				return ret;
			}
		}
		return 0;
	}
	${0}
snippet epdisp
	static int ${1:`ProjectName()`}_epoll_event_dispatch (
		struct $1_s * $1,
		struct epoll_event * event
	)
	{
		if (event->data.fd == $1->signalfd)
			return $1_epoll_event_signalfd($1, event);

		syslog(LOG_ERR, "%s:%d:%s: No match on epoll event.", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
# }}}

# linux file io {{{
snippet open
options head
	// open(2) flags:
	//   O_RDONLY   - read only
	//   O_WRONLY   - write only
	//   O_RDWR     - read/write
	//   O_CREAT    - create if does not exist (see open(2))
	//   O_EXCL     - use with O_CREAT to guarantee creation of file
	//   O_SYNC     - write(2) will sync to hardware before returning
	//   O_DIRECT   - try to not cache reads and writes (probably use O_SYNC instead)
	//   O_APPEND   - atomically append to file (seeking -> writing is not atomic)
	//   O_ASYNC    - use signal-driven I/O; default is SIGIO (warning!)
	//   O_CLOEXEC  - closes the file on exec() - just do it.
	//                this interacts badly with threads, signal will be sent to
	//                random thread in the program. If signal-driven I/O is
	//                wanted, then change the signal to some real-time signal,
	//                and implement synchronous signal handing using
	//                sigwaitinfo(2).
	//   O_NONBLOCK - open in non-blocking mode - is generally a good idea to prevent deadlock
	//   O_TMPFLIE  - create temporary file; filename specifies directory.
	${1:`ProjectName()`->fd} = open(
		/* path  = */ ${2:"/dev/urandom"},
		/* flags = */ ${3:O_RDONLY} | O_CLOEXEC | O_NONBLOCK
	);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: open: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet noblock
alias nonblock
options head
	ret = fcntl(${1:fd}, F_SETFL, O_NONBLOCK);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: fcntl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet nodelay
options head
    ret = setsockopt(${1:fd}, IPPROTO_TCP, TCP_NODELAY, &(int){1}, sizeof(int));
    if (-1 == ret) {
        syslog(LOG_ERR, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
        return -1;
    }
# }}}

# tcp client {{{
snippet getaddrinfo
options head
	struct addrinfo *servinfo, *p;
	ret = getaddrinfo(
		/* host = */ ${1:"127.0.0.1"}, 
		/* port = */ ${2:"3033"},
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_STREAM,
			.ai_flags = AI_PASSIVE
		},
		/* servinfo = */ ${3:`ProjectName()`}${4:->}${5:servinfo}
	);
	if (-1 == ret) {
		syslog(LOG_WARNING, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}
	if (NULL == $3) {
		syslog(LOG_WARNING, "%s:%d:%s: no results from getaddrinfo", __FILE__, __LINE__, __func__);
		return -1;
	}

	// next, maybe call $3_connect_with_servinfo() or something...
	// app->servinfo_p = app->servinfo;
	${0}
snippet setsockopt
options head
	ret = setsockopt(${1:sockfd}, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int));
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet bind
options head
	// bind a source address to the socket
	ret = bind(
		/* fd = */ ${1:sockfd},
		/* sockaddr = */ p->ai_addr,
		/* sockaddr_len = */ p->ai_addrlen
	);
	if (-1 == ret) {
		close($1);
		syslog(LOG_WARNING, "%s:%d:%s: bind: %s", __FILE__, __LINE__, __func__, strerror(errno));
		continue;
	}
	${0}
# }}}

# tcp server {{{
snippet server
options head
	// tcp or udp
	${0}
snippet tcp
options head
	// NOTE TO SELF:
	// remember to include netinet/in.h, arpa/inet.h, netdb.h, sys/socket.h
	struct addrinfo *servinfo, *p;
	ret = getaddrinfo(
		/* host = */ CONFIG_HOST,
		/* port = */ CONFIG_PORT, 
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_STREAM
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}
	if (NULL == servinfo) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo returned no results", __FILE__, __LINE__, __func__);
		return -1;
	}

	p = servinfo;
	int i = 0;
	while (1) {

		// Create a socket
		${1:`ProjectName()`->tcp_fd} = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (-1 == sockfd) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));

			// try the next one
			p = p->ai_next;
			if (NULL == p) {
				break;
			}
			continue;
		}

		// Set the socket REUSEADDR - this makes sure that we can start the
		// application after a restart even if the socket is still registered
		// in the kernel by the old application due to stale connections from
		// clients.
		ret = setsockopt($1, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int));
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// We don't care if this doesn't work so much - we can run without REUSEADDR.
		}


		// Bind a source address to the socket
		ret = bind($1, p->ai_addr, p->ai_addrlen);
		if (-1 == ret) {
			// Ok, we couldn't bind this socket - close this socket and try the
			// next hit from getaddrinfo.
			syslog(LOG_WARNING, "%s:%d:%s: bind: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($1);

			// try the next one
			p = p->ai_next;
			if (NULL == p) {
				break;
			}
			continue;
		}

		// if we got here, we managed to bind the address from getaddrinfo to a
		// socket, but we might want to bind *all* the results, not just the
		// first one... either break here, or call listen here.

		if (4096 < ++i) {
			syslog(LOG_ERR, "%s:%d:%s: infinite loop", __FILE__, __LINE__, __func__);
			return -1;
		}
	}
	freeaddrinfo(servinfo);

	// At this point, we have successfully bound up a port. Now we just need to
	// listen for connection on the port.
	ret = listen($1, TCP_LISTEN_BACKLOG);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: listen: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet listen
options head
	ret = listen(${1:sockfd}, CONFIG_LISTEN_BACKLOG);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: listen: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}

snippet udp
options head
	// NOTE TO SELF:
	// remember to include netinet/in.h, arpa/inet.h, netdb.h, sys/socket.h
	struct addrinfo *servinfo, *p;
	ret = getaddrinfo(
		/* host = */ HOST,
		/* port = */ PORT, 
		/* hints = */ &(struct addrinfo) {
			.ai_family = AF_UNSPEC,
			.ai_socktype = SOCK_DGRAM
		},
		/* servinfo = */ &servinfo
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: getaddrinfo: %s", __FILE__, __LINE__, __func__, gai_strerror(ret));
		return -1;
	}

	// Loop over the results from getaddrinfo and try to bind them up.
	for (p = servinfo; p != NULL; p = p->ai_next) {

		// Create a socket
		${1:`ProjectName()`->udp_fd} = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (-1 == $1) {
			syslog(LOG_WARNING, "%s:%d:%s: socket: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// let's try the next entry...
			continue;
		}

		// Set the socket REUSEADDR - this makes sure that we can start the
		// application after a restart even if the socket is still registered
		// in the kernel by the old application due to stale connections from
		// clients.
		ret = setsockopt($1, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int));
		if (-1 == ret) {
			syslog(LOG_WARNING, "%s:%d:%s: setsockopt: %s", __FILE__, __LINE__, __func__, strerror(errno));
			// We don't care if this doesn't work so much - we can run without REUSEADDR.
		}

		// Bind the socket to the port
		ret = bind($1, p->ai_addr, p->ai_addrlen);
		if (-1 == ret) {
			// Ok, we couldn't bind this socket - close this socket and try the
			// next hit from getaddrinfo.
			syslog(LOG_WARNING, "%s:%d:%s: bind: %s", __FILE__, __LINE__, __func__, strerror(errno));
			close($1);
			continue;
		}

		// If we get here, it means that we've successfully bound up a tcp
		// socket. We don't need to try any more results from getaddrinfo.
		// Break out of the loop.
		break;
	}
	// Remember to free up the servinfo data!
	freeaddrinfo(servinfo);

	// If p is NULL, it means that the above loop went through all of the
	// results from getaddrinfo and never broke out of the loop - so we have no
	// valid socket.
	if (NULL == p) {
		syslog(LOG_ERR, "%s:%d:%s: failed to bind to any address", __FILE__, __LINE__, __func__);
		return -1;
	}

	// Time to add udp_fd to epoll!

	${0}
snippet accept
options head
	${1:client_fd} = accept(
		/* fd = */ ${2:accept_fd},
		/* sockaddr = */ NULL,
		/* sockaddr_len = */ NULL
	);
	if (-1 == $1) {
		if (errno == EAGAIN || errno == EWOULDBLOCK || errno == EINTR) {
			// re-arm fd on epoll and try again
		}
		syslog(LOG_ERR, "%s:%d:%s: accept: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
# }}}

# signal {{{
snippet signal
options head
	// NOTE TO SELF: snippets available for signal
	//  * sigblock - block signal
	//  * sigw
	//  * sigemptyset
	//  * sigaddset
	//  * sigprocmask
	//  * signalfd
	//  * readsignalfd
	//  * signalfdread
	//  * sigqueue - send signal
	${0}
snippet sigqueue
options head
	ret = sigqueue(
		/* pid = */ ${1:getpid()},
		/* sig = */ ${2:SIGRTMIN},
		/* sigval = */ (union sigval) {
			.sival_int = 1
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigqueue: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
snippet sigemptyset
options head
	ret = sigemptyset(${1:&`ProjectName()`->sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigemptyset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigaddset
options head
	ret = sigaddset(${1:&`ProjectName()`->sigset}, ${2:SIGPIPE});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigprocmask
options head
	ret = sigprocmask(
		/* how = */ SIG_BLOCK,
		/* set = */ ${1:&`ProjectName()`->sigset}, 
		/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigprocmask: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet sigblock
options head
	ret = sigemptyset(${1:sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigemptyset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGPIPE);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGINT);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigaddset: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	ret = sigprocmask(
		/* how = */ SIG_BLOCK,
		/* set = */ $1, 
		/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: sigprocmask: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}

	${0}
snippet signalfd
options head
	${1:`ProjectName()`->signal_fd} = signalfd(
		/* fd = */ -1,
		/* &sigset = */ ${2:&`ProjectName()`->sigset},
		/* flags = */ SFD_CLOEXEC | SFD_NONBLOCK
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: signalfd: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet signalfdread
alias readsignalfd
options head
	struct signalfd_siginfo siginfo = {0};
	bytes_read = read(${1:`ProjectName()`->signal_fd}, ${2:&siginfo}, sizeof(struct signalfd_siginfo));
	if (-1 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	if (0 == bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: signal_fd closed!", __FILE__, __LINE__, __func__);
		return -1;
	}
	if (sizeof(struct signalfd_siginfo) != bytes_read) {
		syslog(LOG_ERR, "%s:%d:%s: read unusal number of bytes from signalfd!", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
snippet sigwait
alias sigw
options head
	int gwyinit_sigwait (
			struct gwyinit_s * gwyinit
	)
	{
		int ret;

		siginfo_t siginfo;
		int signal_number = 0;
		for (signal_number = sigwaitinfo(&gwyinit->sigset, &siginfo);
			 signal_number != -1;
			 signal_number = sigwaitinfo(&gwyinit->sigset, &siginfo))
		{
			syslog(LOG_INFO, "%s:%d:%s: signal %d cought...",
					__FILE__, __LINE__, __func__, signal_number);

			// snippet: sigwaitdisp
			ret = gwyinit_sigwait_dispatch(gwyinit, &siginfo);
			if (ret < 0) {
				syslog(LOG_WARNING, "%s:%d:%s: gwyinit_sigwait_dispatch returned %d",
					   __FILE__, __LINE__, __func__, ret);
				return -1;
			}
		}
		if (-1 == signal_number) {
			syslog(LOG_ERR, "%s:%d:%s: sigwaitinfo: %s",
					__FILE__, __LINE__, __func__, strerror(errno));
			return -1;
		}

		return 0;
	}
	${0}
snippet sigwaitdisp
options head
	int gwyinit_sigwait_dispatch (
		struct gwyinit_s * gwyinit,
		siginfo_t * siginfo
	)
	{

		fprintf(stderr, "sigwait with signal no %d\n\n", siginfo->si_signo);

		switch (siginfo->si_signo) {

			case SIGCHLD: {
				// A child terminated. Let's reap it and continue.
				int child_ret;
				pid_t child_pid;

				child_pid = waitpid(-1, &child_ret, WNOHANG);
				if (child_pid < 0) {
					syslog(LOG_WARNING, "%s:%d:%s: waitpid: %s",
						   __FILE__, __LINE__, __func__, strerror(errno));
					return 0;
				}

				syslog(LOG_INFO, "%s:%d:%s: child returned with exit code %d",
					   __FILE__, __LINE__, __func__, child_ret);
				return 0;

			}

			default: {
				syslog(LOG_WARNING, "%s:%d:%s: switch-case defaulted!",
					   __FILE__, __LINE__, __func__);
				return -1;
			}
		}

		// We should never reach this, if we do then we've made a mistake.
		syslog(LOG_ERR, "%s:%d:%s: reached dead code!",
			   __FILE__, __LINE__, __func__);
		return -1;

		(void)gwyinit;
	}
# }}}

# timerfd {{{
snippet timerfd
options head
	// NOTE TO SELF: snippets available for timerfd:
	//   * timerfdc - create a timerfd
	//   * timerfds - timerfd_settime
	// Remember to #include <sys/timerfd.h> (snip 'itimerfd')
	${0}
snippet timerfdc
options head
	// create timerfd
	${1:`ProjectName()`->nats_watchdog} = timerfd_create(CLOCK_MONOTONIC, TFD_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: timerfd_create: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet timerfds
options head
	// arm timerfd
	ret = timerfd_settime(
		/* fd        = */ ${1:`ProjectName()`->nats_watchdog},
		/* opt       = */ 0,
		/* timerspec = */ &(struct itimerspec) {
			.it_interval = {0},
			.it_value = {
				.tv_sec  = ${2:3},
				.tv_nsec = 0
			}
		},
		/* old_ts    = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: timerfd_settime: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
snippet timerfdread
alias readtimerfd
options head
	uint64_t num_expirations;
	int bytes_read = read(timerfd, &num_expirations, sizeof(uint64_t));
# }}}

# mbedtls {{{
snippet mbedtls_base64_decode
options head
	ret = mbedtls_base64_decode(
		/* dest = */ ${1:dest},
		/* dest_len = */ ${2:dest_len},
		/* out_len = */ &${3:out_len},
		/* src = */ (unsigned char*)${4:src},
		/* src_len = */ ${5:src_len}
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_base64_decode returned %d: %.*s", __FILE__, __LINE__, __func__, ret, 512, error);
		return ${6:-1};
	}
	${0}
snippet mbedtls_base64_encode
options head
	ret = mbedtls_base64_encode(
		/* dest = */ ${1:dest},
		/* dest_len = */ ${2:dest_len},
		/* out_len = */ &${3:out_len},
		/* src = */ (unsigned char*)${4:src},
		/* src_len = */ ${5:src_len}
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_base64_encode returned %d: %.*s", __FILE__, __LINE__, __func__, ret, 512, error);
		return ${6:-1};
	}
	${0}
snippet mbedtls_gcm_init
	// mbedtls_gcm_context gcm;
	mbedtls_gcm_init(${1:&gcm});
	// now mbedtls_gcm_setkey
	${0}
snippet mbedtls_gcm_setkey
	ret = mbedtls_gcm_setkey(
		/* gcm = */ ${1:&gcm},
		/* cipher = */ MBEDTLS_CIPHER_ID_AES, 
		/* key = */ (const unsigned char *)key,
		/* key_len (128, 192, or 256) = */ 256
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_gcm_setkey returned %d: %.*s", __FILE__, __LINE__, __func__, ret, sizeof(error), error);
		return -1;
	}
	// now mbedtls_gcm_starts_encrypt or mbedtls_gcm_starts_decrypt
	${0}
snippet mbedtls_gcm_starts_encrypt
	ret = mbedtls_gcm_starts(
		/* gcm = */ &gcm,
		/* cipher = */ MBEDTLS_GCM_ENCRYPT,
		/* iv = */ (const unsigned char *)iv,
		/* iv_len = */ iv_len,
		/* additional = */ NULL,
		/* additional_len = */ 0
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_gcm_starts returned %d: %.*s", __FILE__, __LINE__, __func__, ret, 512, error);
		return -1;
	}
	// now mbedtls_gcm_update
	${0}
snippet mbedtls_gcm_update
	// both out and buf must be at least buf_len in size. mbedtls_gcm_update
	// expects buf_len to be a multiple of 16 in all but the last call before
	// mbedtls_gcm_finish
	ret = mbedtls_gcm_update(
		/* gcm = */ &gcm,
		/* buf_len = */ buf_len,
		/* buf = */ (const unsigned char *)buf,
		/* out = */ out
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_gcm_update returned %d: %.*s", __FILE__, __LINE__, __func__, ret, 512, error);
		return -1;
	}
	${0}
snippet mbedtls_gcm_finish
	// finishes GCM operations and generates an authentication tag (MAC).
	// tag_len must be at least 4, and max 16.
	unsigned char tag[16];
	ret = mbedtls_gcm_finish(
		/* gcm = */ &gcm,
		/* tag = */ tag,
		/* tag_len = */ sizeof(tag)
	);
	if (0 != ret) {
		char error[512];
		mbedtls_strerror(ret, error, sizeof(error));
		syslog(LOG_ERR, "%s:%d:%s: mbedtls_gcm_finish returned %d: %.*s", __FILE__, __LINE__, __func__, ret, 512, error);
		return -1;
	}
	${0}
snippet mbedtls_gcm_free
	mbedtls_gcm_free(&gcm);
	${0}
# }}}

# libnats {{{
snippet nats_publish
options head
	ret = nats_publish(
		/* nats = */ ${1:nats},
		/* topic = */ ${2:topic},
		/* topic_len = */ ${3:topic_len},
		/* payload = */ ${4:payload},
		/* payload_len = */ ${5:payload_len}
	);
	if (ret < 0) {
		syslog(LOG_WARNING, "%s:%d:%s: nats_publish returned %d",
				__FILE__, __LINE__, __func__, ret);
		return ${6:-1};
	}
	${0}
snippet nats_register_subscription
options head
	ret = nats_register_subscription(
		/* nats = */ ${1:nats},
		/* topic = */ ${2:topic},
		/* topic_len = */ ${3:topic_len},
		/* cb = */ ${4:cb}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: nats_register_subscription returned %d",
				__FILE__, __LINE__, __func__,  ret);
		return ${5:-1};
	}
	${0}
snippet nats_request
options head
	ret = nats_request(
		/* nats = */ nats,
		/* topic = */ "${1:topic}",
		/* topic_len = */ strlen("$1"),
		/* callback = */ ${2:callback},
		/* timeout = */ ${3:500},
		/* request = */ (struct nats_request_s) {
			.timeout_cb = ${4:timeout_callback},
			.user_data = gwyhk
		}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: nats_request returned %d",
			__FILE__, __LINE__, __func__, ret
		);
		exit(EXIT_FAILURE);
	}
	${0}
snippet nats_subscribe
options head
	ret = nats_subscribe(
		/* nats = */ nats,
		/* topic = */ "${1:topic}",
		/* topic_len = */ strlen("$1"),
		/* callback = */ ${2:callback},
		/* args = */ (struct nats_subscribe_s) {
			.user_data = NULL,
			.message_limit = 0,
			.message_limit_cb = NULL,
			.timeout = 0,
			.timeout_cb = NULL
		}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: nats_subscribe returned %d",
			__FILE__, __LINE__, __func__, ret
		);
		exit(EXIT_FAILURE);
	}
	${0}
snippet nats_unsubscribe
options head
	ret = nats_unsubscribe(
		/* nats = */ nats,
		/* topic = */ "${1:topic}",
		/* topic_len = */ strlen("$1"),
		/* callback = */ ${2:NULL}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: nats_unsubscribe returned %d",
			__FILE__, __LINE__, __func__, ret
		);
		exit(EXIT_FAILURE);
	}
	${0}
# }}}

# pthread {{{
snippet pthread
options head
	// Snippets on pthread
	//  * pthread_create (pthreadc)
snippet pthread_create
options head
alias pthreadc
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setstacksize(&attr, 1024*1024*16);

	ret = pthread_create(
		/* thread = */ ${1:&`ProjectName()`->pthread},
		/* attr = */ &attr,
		/* func = */ ${2:func},
		/* arg = */ ${3:`ProjectName()`}
	);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: pthread_create: %s",
				__FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
	${0}
# }}}

# sqlite3 {{{
snippet sqlite3_open
alias sqlite3_open_v2
options head
	// useful flags: SQLITE_OPEN_READONLY, SQLITE_OPEN_READWRITE, SQLITE_OPEN_CREATE, SQLITE_OPEN_MEMORY
	ret = sqlite3_open_v2(
		/* path = */ ${1:"db.sqlite"},
		/* db = */ &${2:db},
		/* flags = */ ${3:SQLITE_OPEN_READWRITE},
		/* vfs = */ NULL
	);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_open_v2 returned %d: %s",
			__FILE__, __LINE__, __func__, ret, sqlite3_errmsg($2));
		return -1;
	}
	${0}
snippet sqlite3_exec
options head
	ret = sqlite3_exec(
		/* db = */ ${1:`ProjectName()`}${2:->db},
		/* sql = */ ${3:"SELECT ..."},
		/* cb = */ ${4:NULL},
		/* user_data = */ ${5:`ProjectName()`},
		/* err = */ &err
	);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_exec returned %d: %s",
			__FILE__, __LINE__, __func__, ret, err);
		return -1;
	}
	${0}
snippet sqlite3_fk
alias sqlite3_foreign_keys
options head
	ret = sqlite3_exec(
		/* db = */ ${1:`ProjectName()`}${2:->db},
		/* sql = */ "pragma foreign_keys=1;",
		/* cb = */ NULL,
		/* user_data = */ NULL,
		/* err = */ &err
	);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_exec returned %d: %s",
			__FILE__, __LINE__, __func__, ret, err);
		return -1;
	}
	${0}
snippet sqlite3_user_version
alias sqlite3_migrate
options head
	ret = sqlite3_prepare_v3(
		/* db = */ ${1:`ProjectName()`}${2:->db},
		/* sql = */ "pragma user_version;",
		/* sql_len = */ strlen("pragma user_version;"),
		/* flags = */ SQLITE_PREPARE_NORMALIZE,
		/* &stmt = */ &${3:stmt},
		/* &sql_end = */ NULL
	);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_prepare_v2 returned %d: %s",
			__FILE__, __LINE__, __func__, ret, sqlite3_errmsg($1$2));
		return -1;
	}

	ret = sqlite3_step($3);
	if (SQLITE_ROW != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_step returned %d: %s",
				__FILE__, __LINE__, __func__, ret, sqlite3_errmsg($1$2));
		sqlite3_finalize($3);
		return -1;
	}

	const int sqlite3_user_version = sqlite3_column_int($3, 0);

	ret = sqlite3_finalize($3);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_finalize returned %d: %s",
			__FILE__, __LINE__, __func__, ret, sqlite3_errmsg($1$2));
		return -1;
	}

	if (0 == sqlite3_user_version) {
		syslog(LOG_INFO, "%s:%d:%s: doing full schema migration", __FILE__, __LINE__, __func__);

		ret = $1_init_schema_migration_full($1);
		if (-1 == ret) {
			syslog(LOG_ERR, "%s:%d:%s: $1_init_schema_migration_full returned -1", __FILE__, __LINE__, __func__);
			return -1;
		}

		return 0;
	}

	// current schema version
	if (1 == sqlite3_user_version) {
		return 0;
	}

    // if we reach this point, the sqlite3 schema version is too new for us to
    // handle; don't touch it!
    syslog(LOG_ERR, "%s:%d:%s: sqlite3 schema version is too new; giving up", __FILE__, __LINE__, __func__);
    return -1;
	${0}
snippet sqlite3_prepare_v3
options head
    sqlite3_stmt * ${1:stmt} = NULL;
    ret = sqlite3_prepare_v3(
        /* db = */ ${2:`ProjectName()`}${3:->db},
        /* sql = */ ${4:"SELECT ..."},
        /* sql_len = */ ${5:strlen($4)},
        /* flags = */ ${6:SQLITE_PREPARE_NORMALIZE},
        /* &stmt = */ &$7,
        /* &sql_end = */ NULL
    );
    if (SQLITE_OK != ret) {
        syslog(LOG_ERR, "%s:%d:%s: sqlite3_prepare_v2 returned %d: %s",
			__FILE__, __LINE__, __func__, ret, sqlite3_errmsg($2));
        return -1;
    }
	${0}
snippet sqlite3_bind_text
options head
	ret = sqlite3_bind_text(
		/* stmt = */ ${1:stmt},
		/* index = */ ${2:1},
		/* text = */ ${3:buf},
		/* text_len = */ ${4:buf_len},
		/* destructor = */ SQLITE_STATIC
	);
	if (SQLITE_OK != ret) {
		syslog(LOG_ERR, "%s:%d:%s: sqlite3_bind_text returned %d: %s",
			__FILE__, __LINE__, __func__, ret, sqlite3_errmsg(${5:`ProjectName()`}${6:->db}));
		return -1;
	}
	${0}
# }}}

# linux process stuff {{{
snippet fork
options head
	switch (pid = fork()) {
		case -1:
			syslog(LOG_ERR, "%s:%d:%s: fork: %s", __FILE__, __LINE__, __func__, strerror(errno));
			return -1;
			break;

		case 0:
			execl("/bin/something", "something", (const char * const)0);
			syslog(LOG_ERR, "%s:%d:%s: execl /bin/something: %s", __FILE__, __LINE__, __func__, strerror(errno));
			exit(EXIT_FAILURE);
			break;

		default:
			waitpid(pid, &ret, 0);
			if (0 != ret) {
				syslog(LOG_WARNING, "%s:%d:%s: /bin/something returned %d", 
						__FILE__, __LINE__, __func__, ret);
			}
	}
# }}}

# io_uring {{{
snippet uringdisp
alias urdisp
options head
	static int ${1:`ProjectName()`}_uring_event_dispatch (
		struct $1_s * $1,
		struct io_uring_cqe * cqe
	)
	{
		if (NULL == cqe->user_data) {
			io_uring_cqe_seen(&$1->${2:ring}, cqe);
			return 0;
		}

		if (*(int*)cqe->user_data == $1->signalfd)
			return $1_uring_event_signalfd($1, cqe);

		syslog(LOG_ERR, "%s:%d:%s: No match on uring event.", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
snippet uringw
alias io_uring_wait_cqe
alias urw
options head
	struct io_uring_cqe * cqe;
	while (1) {

		ret = io_uring_wait_cqe(&${1:`ProjectName()`}->${2:ring}, &cqe);
		if (ret < 0) {
			syslog(LOG_ERR, "%s:%d:%s: io_uring_wait_cqe: %s", __FILE__, __LINE__, __func__, strerror(-ret));
			return -1;
		}

		ret = $1_uring_event_dispatch($1, cqe);
		if (-1 == ret) {
			syslog(LOG_ERR, "%s:%d:%s: $1_uring_event_dispatch returned -1", __FILE__, __LINE__, __func__);
			return -1;
		}
	}
	${0}
snippet io_uring_queue_init
alias uring_init
alias urc
options head
	// create uring
	ret = io_uring_queue_init(${1:CONFIG_URING_DEPTH}, &${2:`ProjectName()`}${3:->}${4:ring}, 0);
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_queue_init: %s", __FILE__, __LINE__, __func__, strerror(-ret));
		return -1;
	}
	${0}
snippet io_uring_get_sqe
alias uring_get_sqe
alias ursqe
alias urget
options head
	sqe = io_uring_get_sqe(&${1:`ProjectName()`}${2:->}${3:ring});
	if (NULL == sqe) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	${0}
snippet io_uring_prep_accept
alias uring_prep_accept
alias uring_accept
alias uraccept
options head
	// accept()
	${1:sqe} = io_uring_get_sqe(&${2:`ProjectName()`}->${3:ring});
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_accept(
		/* sqe = */ $1, 
		/* fd = */ ${4:fd}, 
		/* addrinfo = */ ${5:NULL},
		/* addrinfo_len = */ ${6:0},
		/* flags = */ ${7:0}
	);
	io_uring_sqe_set_data($1, ${8:&$4});
	io_uring_submit(&$2->$3);
	${0}
snippet io_uring_prep_read
alias uring_prep_read
alias uring_read
alias urread
options head
	// register a read call on fd
	${1:sqe} = io_uring_get_sqe(&${2:`ProjectName()`}->${3:ring});
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_read(
		/* sqe = */ $1,
		/* fd = */ ${4:fd},
		/* buf = */ ${5:buf},
		/* buf_len = */ ${6:sizeof($5)},
		/* offset = */ ${7:0}
	);
	io_uring_sqe_set_data($1, ${8:&$4});
	io_uring_sqe_set_flags($1, IOSQE_IO_LINK);

	// link a timeout
	$1 = io_uring_get_sqe(&$2->$3);
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_link_timeout(
		/* sqe = */ $1,
		/* timeout = */ &(struct __kernel_timespec) {
			.tv_sec = ${9:30},
			.tv_nsec = ${10:0}
		},
		/* flags = */ 0
	);
	io_uring_sqe_set_data($1, ${11:0});
	io_uring_sqe_set_flags($1, IOSQE_IO_LINK);
	io_uring_submit(&$2->$3);
	${0}
snippet io_uring_prep_write
alias uring_prep_write
alias uring_write
alias urwrite
options head
	// write buffer to fd
	${1:sqe} = io_uring_get_sqe(&${2:`ProjectName()`}->${3:ring});
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_write(
		/* sqe = */ $1,
		/* fd = */ ${4:fd},
		/* buf = */ ${5:buf},
		/* buf_len = */ ${6:sizeof($5)},
		/* offset = */ ${7:0}
	);
	io_uring_sqe_set_data($1, ${8:&$4});
	io_uring_submit(&$2->$3);
	${0}
snippet io_uring_prep_close
alias uring_prep_close
alias uring_close
alias urclose
options head
	${1:sqe} = io_uring_get_sqe(&${2:`ProjectName()`}->${3:ring});
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_close(
		/* sqe = */ $1,
		/* fd = */ ${4:fd}
	);
	io_uring_sqe_set_data($1, ${5:0});
	io_uring_submit(&$2->$3);
	${0}
snippet io_uring_sqe_seen
alias uring_seen
alias urseen
options head
	// mark this event as seen
	io_uring_cqe_seen(&${1:`ProjectName()`}->${2:ring}, ${3:cqe});${0}
snippet io_uring_register_files
alias urfiles
options head
	ret = io_uring_register_files(
		/* ring = */ &${1:`ProjectName()`}->${2:ring},
		/* files = */ (int[]) {
			${3:fd}${4:#:,...}
		},
		/* files_len = */ ${5:1}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_register_files: %s", __FILE__, __LINE__, __func__, strerror(-ret));
		return -1;
	}
	${0}
snippet io_uring_register_buffers
alias urbuffers
options head
	ret = io_uring_register_buffers(
		/* ring = */ &${1:`ProjectName()`}->${2:ring},
		/* files = */ (struct iovec[]) {
			{
				.iov_base = ${3:buf},
				.iov_len = ${4:buf_len}
			}${5:#:,...}
		},
		/* iovec_len = */ ${6:1}
	);
	if (ret < 0) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_register_buffers: %s", __FILE__, __LINE__, __func__, strerror(-ret));
		return -1;
	}
	${0}
snippet io_uring_prep_poll_add
alias urpoll
options head
	// add poll
	${1:sqe} = io_uring_get_sqe(&${2:`ProjectName()`}->${3:ring});
	if (NULL == $1) {
		syslog(LOG_ERR, "%s:%d:%s: io_uring_get_sqe returned NULL", __FILE__, __LINE__, __func__);
		return -1;
	}
	io_uring_prep_poll_add(
		/* sqe = */ $1,
		/* fd = */ ${4:fd},
		/* poll_mask = */ ${5:POLLIN}
	);
	io_uring_sqe_set_data($1, ${8:&$4});
	io_uring_submit(&$2->$3);
	${0}
# }}}

# vim: fdm=marker noexpandtab
